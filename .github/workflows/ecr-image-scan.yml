name: Run ECR Image Vulnerability Scan

on:
  workflow_call:
    inputs:
      ecr_repo:
        required: true
        type: string
      aws_region:
        required: true
        type: string
      critical_threshold:
        required: false
        type: number
        default: 5
    secrets:
      AWS_IAM_ROLE_ATHENTICATION:
        required: true

jobs:
  ecr-image-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ATHENTICATION }}
          role-session-name: GitHubActionSession
          aws-region: ${{ inputs.aws_region }}

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Set Image Tag
        id: vars
        run: |
          IMAGE_TAG=${{ github.ref_name }}-$(echo $GITHUB_SHA | head -c 8)
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      - name: Run ECR Vulnerability Scan
        run: |
          set -e
          ECR_REPO="${{ inputs.ecr_repo }}"
          IMAGE_TAG="${{ env.IMAGE_TAG }}"
          REGION="${{ inputs.aws_region }}"
          THRESHOLD="${{ inputs.critical_threshold }}"

          echo "Starting ECR Vulnerability Scan Check for: $ECR_REPO:$IMAGE_TAG ($REGION)"

          aws ecr wait image-scan-complete \
              --region "$REGION" \
              --repository-name "$ECR_REPO" \
              --image-id imageTag="$IMAGE_TAG"

          echo "Scan completed. Fetching findings..."

          SCAN_FINDINGS=$(aws ecr describe-image-scan-findings \
              --region "$REGION" \
              --repository-name "$ECR_REPO" \
              --image-id imageTag="$IMAGE_TAG" | jq '.imageScanFindings.findingSeverityCounts')

          CRITICAL=$(echo "$SCAN_FINDINGS" | jq '.CRITICAL // 0')

          echo "=== Vulnerabilities Summary ==="
          echo "CRITICAL: $CRITICAL"
          echo "Threshold: $THRESHOLD"
          echo "==============================="

          if [[ "$CRITICAL" -gt "$THRESHOLD" ]]; then
            echo "Image has $CRITICAL CRITICAL vulnerabilities! Failing pipeline."
            exit 1
          fi

          echo "Image passed vulnerability check."